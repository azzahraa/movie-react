import React, { ReactNode } from "react";
import { BSDiv } from "../types";
export declare type ToasterAddHandler = (props: ToastProps) => void;
export declare type ToasterRemoveHandler = (key: number) => void;
export interface Toaster extends BSDiv {
    duration?: number;
    children: (add: ToasterAddHandler, remove: ToasterRemoveHandler) => ReactNode;
}
export declare const Toaster: React.ForwardRefExoticComponent<Toaster & React.RefAttributes<HTMLDivElement>>;
export interface ToastProps extends Omit<BSDiv, "title"> {
    key?: number;
    title?: ReactNode;
    time?: ReactNode;
    body?: ReactNode;
    dismissable?: boolean;
    icon?: ReactNode;
    duration?: number;
    onDismiss?: () => void;
}
export declare const Toast: React.ForwardRefExoticComponent<ToastProps & React.RefAttributes<HTMLDivElement>>;
export declare const ToastHeader: React.ForwardRefExoticComponent<import("../types").BSProps & React.HTMLAttributes<HTMLDivElement> & React.RefAttributes<HTMLDivElement>>;
export declare const ToastBody: React.ForwardRefExoticComponent<import("../types").BSProps & React.HTMLAttributes<HTMLDivElement> & React.RefAttributes<HTMLDivElement>>;
